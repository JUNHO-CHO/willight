# 1) 하나의 함수는 3개의 숫자를 받는다. 호출을 하면 안에 숫자에 대한 평균값을 구하라
#
# 위의 함수 기능을
# 3개의 숫자가 아닌 100개든 1000개든 10000개의 입력을 받아도 평균 값을 구하는 함수로 변경해주세요

# 1) 하나의 함수는 3개의 숫자를 받는다. 호출을 하면 안에 숫자에 대한 평균값을 구하라

# def number(*args):             #함수정의
#     rlt = sum(args)/len(args)  #arg의 정의된 인자를 모두 더함/ arg의 인자의 개수
#     print(rlt)                 # 출력
# -----------------------------------------------------------------------------
# 기본 문제 1)
# 딕셔너리 구조에서 Value 값이 25 이상 필터링 후 출력
# d = {'a': 25, 'b': 2, 'c': 45, 'd': 21, 'e': 44, 'f': 99}
#
# new_d= {}                     #빈 딕셔너리 생성
# for key, value in d.items():  # d 안에 있는것들 중 벨류와 키를 반복문 사용
#     if value >= 25 :          # 25이상의 벨류값 찾기
#         new_d[key] = value    #new_d에 딕셔너리 안에 있는 키와 벨류를 추가
# print(new_d)                  #new_d 출력

# -------------------------------------------------------------------------------

# 기본 문제 2)
# 딕셔너리를 활용하여 아래와 같이 출력해주세요
# key "one" has values [1, 2, 3, 4, 5, 6, 7, 8, 9]
# -> total : 9 key "two" has values [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
# -> total : 23 key "three" has values [44, 45, 46, 47, 48] -> total : 5


# # - 3개의 값에 대한 평균 구하기
# #     - 88
# #     - 93
# #     - 95
# # - 평균: 자료 전체의 합을 자료의 개수로 나눈 값
#
# a = [88, 93, 95]      #a리스트로 묶기
# average=sum(a)/len(a)  #리스트 a안의 숫자는 더한것을 a의 갯수로 나눠준다
# print(average)         # 평균 출력
# ---------------------------------------------------------------------


# - 8개의 값에 대한 평균 구하기/N개
#     - 88
#     - 93
#     - 95
#     - 100
#     - …
#     - …
#     - …
#     - …


# a=[88,93,95,100,101,102,103,104]
# def number(*a):             #함수정의
#     number = sum(a)/len(a)  #arg의 정의된 인자를 모두 더함/ arg의 인자의 개수
#     return(number)          #평균값 반환
# print(number(*a))           # *a 값 출력

# --------------------------------------------------------------------------------
# 문제 1 - 합격자 수 구하기
# 합격 컷트 라인은 60점
# 점수 : [80, 40, 90, 55, 94, 30, 60, 44]
# answer = 합격자 수(4)
# def count_passer(score, c):    #함수정의(점수,c합격 컷트라인)
#     answer = 0                 # 추가할 매개변수
#     for i in score:            # 점수를 i변수로 설정 후 반복 설정
#         if i >= c:             # 컷트라인(c)보다 i가 크거나 같으면
#             answer += 1        # answer에 1을 추가한다.
#
#
#     return answer              # answer값 반환
#
#
# # [80, 40, 90, 55, 94, 30, 60, 44]
# print(count_passer([80, 40, 90, 55, 94, 30, 60, 44], 60))
# print(count_passer([20, 50, 20, 80, 45], 30))
#
#
# --------------------------------------------------------------------

# 문제 2 - 최소값 구하기(index)
# nums의 길이 3 < = n < = 100.000
# O(???)
# 배열의 nums 원소는 정수
# 배열의 원소는 중복된 값이 없다.
# [23, 20, 73, 98, 11, 4, 288]
# [33, 423 32, 435, 235, 7, 56]

# def minimum_value(nums):
#     answer = 0
#     for num in range(len(nums)):
#         if nums[num] < nums[answer]:
#             minimum = num
#     return minimum
#
#
# # [23, 20, 73, 98, 11, 4, 288]
# print(minimum_value([23, 20, 73, 98, 11, 4, 288])) # 5
# print(minimum_value([33, 423, 32, 2, 56])) # 3

# ----------------------------------------------------------------





